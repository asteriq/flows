[{"id":"a6cd76a4.65285f38","type":"inject","z":"ffb0d476.dddc1129","name":"Setup and Run Queries","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"userComments":[],"x":242,"y":63,"edges":[["68fcaf67.7ab6194e"]]},{"id":"e00ba997.0d1a9f6e","type":"create","z":"ffb0d476.dddc1129","name":"Query Playbook","host":"https://vora-notebook-wells.app.quantiply.com","notebookName":"Vora TimeSeries","x":132,"y":291,"edges":[["2d1cddcc.f7091de3"]]},{"id":"58b68ddf.25b032ae","type":"sh","z":"ffb0d476.dddc1129","name":"Get Data and Load into HDFS","content":"wget http://cloud.quantiply.io/DemandData_2015_2.csv\nhadoop fs -put DemandData_2015_2.csv\nhadoop fs -ls","x":337,"y":197,"edges":[["5e4f7fce.2e3cbd1b"]]},{"id":"8b24ca75.13d412b3","type":"inject","z":"ffb0d476.dddc1129","name":"Run Queries","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"userComments":[],"x":116,"y":217,"edges":[["e00ba997.0d1a9f6e"]]},{"id":"2d1cddcc.f7091de3","type":"spark","z":"ffb0d476.dddc1129","name":"Single Column and Range","content":"sqlContext.sql(\"``SELECT ts, ND FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","x":326,"y":381,"edges":[["d58bbeec.5441f47d"]]},{"id":"5e4f7fce.2e3cbd1b","type":"spark","z":"ffb0d476.dddc1129","name":"Spark Paragraph","content":"import org.apache.spark.sql._\nval sqlContext = new SapSQLContext( sc )\n\nsqlContext.sql(s\"\"\"REGISTER ALL TABLES USING com.sap.spark.vora OPTIONS (eagerLoad \"false\")\"\"\")\n\nsqlContext.sql(\"SHOW TABLES\").show()","x":298,"y":269,"edges":[["6818d501.7b1330e2"]]},{"id":"d58bbeec.5441f47d","type":"spark","z":"ffb0d476.dddc1129","name":"What is the overall trend in available wind and solar capacity over the year of 2015?","content":"sqlContext.sql(\"\"\"``SELECT TREND(Embedded_Wind_Capacity), TREND(Embedded_Solar_Capacity)\n  FROM national_grid_demand\n  WHERE PERIOD BETWEEN TIMESTAMP '2015-01-01 00:00:00' AND TIMESTAMP '2016-01-01 00:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n","x":705,"y":111,"edges":[["c099072e.78e05384"]]},{"id":"c099072e.78e05384","type":"spark","z":"ffb0d476.dddc1129","name":"Trend over the last three months","content":"sqlContext.sql(\"``SELECT TREND(ND) FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","x":691,"y":217,"edges":[["146dac9b.8f2b271e"]]},{"id":"146dac9b.8f2b271e","type":"spark","z":"ffb0d476.dddc1129","name":"Supply vs. Demand","content":"sqlContext.sql(\"``SELECT median(Embedded_Solar_Generation), median(Embedded_Solar_Capacity) FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","x":647,"y":267,"edges":[["83d3de5e.40792d32","309f1c34.047059fd"]]},{"id":"83d3de5e.40792d32","type":"spark","z":"ffb0d476.dddc1129","name":"How is Wind Generation is behaving?","content":"sqlContext.sql(\"``SELECT median(Embedded_Wind_Generation), median(Embedded_Wind_Capacity) FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","x":704,"y":357,"edges":[["7fbb8dbd.215edbcc"]]},{"id":"7fbb8dbd.215edbcc","type":"spark","z":"ffb0d476.dddc1129","name":"how the production values deviate throughout the years?","content":"sqlContext.sql(\"``select * from HISTOGRAM ( SERIES national_grid_demand, 10, DESCRIPTOR( Embedded_Wind_Generation ) ) HIST`` USING com.sap.spark.engines\").show()\n","x":705,"y":415,"edges":[["63c35d05.07be2912","d47a7ef0.c237201b"]]},{"id":"6818d501.7b1330e2","type":"spark","z":"ffb0d476.dddc1129","name":"Create Partitions and Series Tables","content":"sqlContext.sql(\"CREATE PARTITION FUNCTION PF1(C TIMESTAMP) AS RANGE BOUNDARIES(TIMESTAMP '2015-04-01 09:00:00.0000', TIMESTAMP '2015-09-01 09:00:00.0000') USING com.sap.spark.engines\")\nsqlContext.sql(\"CREATE PARTITION SCHEME PS1 USING PF1 USING com.sap.spark.engines\")\nsqlContext.sql(s\"\"\"CREATE TABLE national_grid_demand ( ts TIMESTAMP, ND double, I014_ND double, TSD double, I014_TSD double, England_Wales_Demand double, Embedded_Wind_Generation double, Embedded_Wind_Capacity integer, Embedded_Solar_Generation double, Embedded_Solar_Capacity integer )\n    SERIES ( PERIOD FOR SERIES ts START TIMESTAMP '2015-01-01 00:00:00' END TIMESTAMP '2016-01-01 00:00:00'\n    EQUIDISTANT INCREMENT BY 30 MINUTE DEFAULT COMPRESSION use (APCA error 3.0 percent)\n    compression on (Embedded_Wind_Generation) use (SDT error 4.0 percent)\n    compression on (Embedded_Solar_Generation) use (SDT error 5.0 percent) )\n    PARTITION BY PS1( ts )\n    USING com.sap.spark.engines\n    OPTIONS (\n        files \"/user/spark/DemandData_2015_2.csv\",\n        csvskip \"1\",\n        csvdelimiter \";\",\n        storagebackend \"hdfs\")\"\"\".stripMargin)\n ","x":356,"y":327,"edges":[["2d1cddcc.f7091de3"]]},{"id":"63c35d05.07be2912","type":"spark","z":"ffb0d476.dddc1129","name":"30 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n     ts,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        24 HOUR,\n        ROUND_HALF_UP,\n        SUM => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        AVG => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity)  )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 12:00:00'\n                 AND TIMESTAMP '2015-08-03 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n \n","x":661,"y":533,"edges":[["a9c49a89.f2e5dd2f"]]},{"id":"a9c49a89.f2e5dd2f","type":"spark","z":"ffb0d476.dddc1129","name":"Or 15 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","x":671,"y":608,"edges":[["966dc1a5.5c9f9f40"]]},{"id":"966dc1a5.5c9f9f40","type":"spark","z":"ffb0d476.dddc1129","name":"Analyze Granularized Data","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","x":675,"y":689,"edges":[["93f19b01.a21e4f23"]]},{"id":"93f19b01.a21e4f23","type":"viewport","z":"ffb0d476.dddc1129","name":"","active":true,"console":"false","complete":"false","x":662,"y":779,"edges":[]},{"id":"68fcaf67.7ab6194e","type":"create","z":"ffb0d476.dddc1129","name":"Create Vora Playbook","host":"https://vora-playbooks-tdx26.app.quantiply.com","notebookName":"Vora TimeSeries","x":234,"y":131,"edges":[["58b68ddf.25b032ae"]]},{"id":"309f1c34.047059fd","type":"function","z":"ffb0d476.dddc1129","name":"Transformer","clusterid":"","func":" function round4(num, dec) {\n    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n}\n \n  dataframe.message = {\n    data: [\n    {\n      id: 1,\n      name: 'Power Supply',\n      value: round4(dataframe.message.data.data[0][0],4),\n      uom: 'MWH',\n      last: 359.80\n    },\n    {\n      id: 2,\n      name: 'Total Demand',\n      value: round4(dataframe.message.data.data[0][1],4),\n      uom: 'MWH',\n      last: 12123.72\n    }\n  ]\n  };\n\nreturn dataframe;","outputs":1,"noerr":0,"x":960,"y":284,"edges":[["baaa0daf.3e7b0236"]]},{"id":"baaa0daf.3e7b0236","type":"kpi","z":"ffb0d476.dddc1129","name":"Supply vs. Demand KPIs","sequenceNum":1,"pulseType":"widget-multi-indicator","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":997,"y":328,"edges":[[]]},{"id":"d47a7ef0.c237201b","type":"viewport","z":"ffb0d476.dddc1129","name":"","active":true,"console":"false","complete":"message.data","userComments":[],"x":942,"y":507,"edges":[]}]
