[{"id":"f91ef2e3.a9c4c55e","type":"create","z":"d5062ea2.5a40af53","name":"Query Playbook","host":"https://vora-notebook-checktimeseries.app.quantiply.com","notebookName":"Vora TimeSeries","userComments":[],"x":82.25,"y":275,"edges":[["676c7e6f.713c8759"]]},{"id":"9ee6c363.715e96cf","type":"sh","z":"d5062ea2.5a40af53","name":"Get Data and Load into HDFS","content":"wget http://cloud.quantiply.io/DemandData_2015_2.csv\nhadoop fs -put DemandData_2015_2.csv\nhadoop fs -ls","userComments":[],"x":287.25,"y":181,"edges":[["dca2cdbf.b75747ba"]]},{"id":"87055d98.b61827ab","type":"inject","z":"d5062ea2.5a40af53","name":"","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"userComments":[],"x":109.25,"y":212,"edges":[["f91ef2e3.a9c4c55e"]]},{"id":"676c7e6f.713c8759","type":"spark","z":"d5062ea2.5a40af53","name":"Single Column and Range","content":"sqlContext.sql(\"``SELECT ts, ND FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","userComments":[],"x":177.25,"y":387,"edges":[["c65d7d2a.92cd5dbc","d50dd98f.862708","76d38d17.47e0128e"]]},{"id":"dca2cdbf.b75747ba","type":"spark","z":"d5062ea2.5a40af53","name":"Spark Paragraph","content":"import org.apache.spark.sql._\nval sqlContext = new SapSQLContext( sc )\n\nsqlContext.sql(s\"\"\"REGISTER ALL TABLES USING com.sap.spark.vora OPTIONS (eagerLoad \"false\")\"\"\")\n\nsqlContext.sql(\"SHOW TABLES\").show()","userComments":[],"x":248.25,"y":253,"edges":[["29a1b947.254758b3"]]},{"id":"76d38d17.47e0128e","type":"spark","z":"d5062ea2.5a40af53","name":"What is the overall trend in available wind and solar capacity over the year of 2015?","content":"sqlContext.sql(\"\"\"``SELECT TREND(Embedded_Wind_Capacity), TREND(Embedded_Solar_Capacity)\n  FROM national_grid_demand\n  WHERE PERIOD BETWEEN TIMESTAMP '2015-01-01 00:00:00' AND TIMESTAMP '2016-01-01 00:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n","userComments":[],"x":655.25,"y":95,"edges":[["c554c7ae.3bcb3ac5","8397305c.89c8b"]]},{"id":"c554c7ae.3bcb3ac5","type":"spark","z":"d5062ea2.5a40af53","name":"Trend over the last three months","content":"sqlContext.sql(\"``SELECT TREND(ND) FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","userComments":[],"x":641.25,"y":201,"edges":[["4bb7267c.c222ff86","43c499f9.38e725b7"]]},{"id":"4bb7267c.c222ff86","type":"spark","z":"d5062ea2.5a40af53","name":"Supply vs. Demand","content":"sqlContext.sql(\"``SELECT median(Embedded_Solar_Generation), median(Embedded_Solar_Capacity) FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","userComments":[],"x":597.25,"y":251,"edges":[["25bbd44e.8be81e22","4cde7128.f5947bbf"]]},{"id":"25bbd44e.8be81e22","type":"spark","z":"d5062ea2.5a40af53","name":"How is Wind Generation is behaving?","content":"sqlContext.sql(\"``SELECT min(Embedded_Wind_Generation) as minWG,max(Embedded_Wind_Generation) as maxWG,median(Embedded_Wind_Generation) as medWG,min(Embedded_Wind_Capacity) as minWC, max(Embedded_Wind_Capacity) as maxWC, median(Embedded_Wind_Capacity)as medWC FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","userComments":[],"x":661.25,"y":327,"edges":[["d1695905.384a644b","18dc677f.dac8f4f8","c78032e2.9f0e4cc5","6ac2a39a.71058d69"]]},{"id":"6ac2a39a.71058d69","type":"spark","z":"d5062ea2.5a40af53","name":"how the production values deviate throughout the years?","content":"sqlContext.sql(\"``select * from HISTOGRAM ( SERIES national_grid_demand, 10, DESCRIPTOR( Embedded_Wind_Generation ) ) HIST`` USING com.sap.spark.engines\").show()\n","userComments":[],"x":655.25,"y":419,"edges":[["d3df8672.a61adaea","547e4eaa.db331","f0906569.5e0c751a"]]},{"id":"29a1b947.254758b3","type":"spark","z":"d5062ea2.5a40af53","name":"Create Partitions and Series Tables","content":"sqlContext.sql(\"CREATE PARTITION FUNCTION PM5(C TIMESTAMP) AS RANGE BOUNDARIES(TIMESTAMP '2015-04-01 09:00:00.0000', TIMESTAMP '2015-09-01 09:00:00.0000') USING com.sap.spark.engines\")\nsqlContext.sql(\"CREATE PARTITION SCHEME PS5 USING PM5 USING com.sap.spark.engines\")\nsqlContext.sql(s\"\"\"CREATE TABLE national_grid_demand5 ( ts TIMESTAMP, ND double, I014_ND double, TSD double, I014_TSD double, England_Wales_Demand double, Embedded_Wind_Generation double, Embedded_Wind_Capacity integer, Embedded_Solar_Generation double, Embedded_Solar_Capacity integer )\n    SERIES ( PERIOD FOR SERIES ts START TIMESTAMP '2015-01-01 00:00:00' END TIMESTAMP '2016-01-01 00:00:00'\n    EQUIDISTANT INCREMENT BY 30 MINUTE DEFAULT COMPRESSION use (APCA error 3.0 percent)\n    compression on (Embedded_Wind_Generation) use (SDT error 4.0 percent)\n    compression on (Embedded_Solar_Generation) use (SDT error 5.0 percent) )\n    PARTITION BY PS5( ts )\n    USING com.sap.spark.engines\n    OPTIONS (\n        files \"/user/spark/DemandData_2015_2.csv\",\n        csvskip \"1\",\n        csvdelimiter \";\",\n        storagebackend \"hdfs\")\"\"\".stripMargin)\n ","userComments":[],"x":325.25,"y":322,"edges":[["676c7e6f.713c8759"]]},{"id":"f0906569.5e0c751a","type":"spark","z":"d5062ea2.5a40af53","name":"30 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n     ts,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        24 HOUR,\n        ROUND_HALF_UP,\n        SUM => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        AVG => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity)  )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 12:00:00'\n                 AND TIMESTAMP '2015-08-03 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n \n","userComments":[],"x":611.25,"y":517,"edges":[["e33ec87a.cfadb1cd","126d066f.79cebf82","0d7b3850.8a10ec89"]]},{"id":"0d7b3850.8a10ec89","type":"spark","z":"d5062ea2.5a40af53","name":"Or 15 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","userComments":[],"x":621.25,"y":592,"edges":[["5c24a095.80e6de6e","5e85f6c9.630be001","2cdf6a23.4c7274db"]]},{"id":"2cdf6a23.4c7274db","type":"spark","z":"d5062ea2.5a40af53","name":"Analyze Granularized Data","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","userComments":[],"x":625.25,"y":673,"edges":[["6307e8f2.d0bcf307","3a577fb3.793fc50a"]]},{"id":"4fa3ac2c.cd39043b","type":"create","z":"d5062ea2.5a40af53","name":"Create Vora Playbook","host":"https://vora-notebook-checktimeseries.app.quantiply.com","notebookName":"Vora TimeSeries","userComments":[],"x":192.25,"y":137,"edges":[["9ee6c363.715e96cf"]]},{"id":"badd05ec.23208646","type":"inject","z":"d5062ea2.5a40af53","name":"","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"userComments":[],"x":151.25,"y":53,"edges":[["4fa3ac2c.cd39043b","5fa78436.a1108c"]]},{"id":"4cde7128.f5947bbf","type":"function","z":"d5062ea2.5a40af53","name":"Transformer","clusterid":"","func":" function round4(num, dec) {\n    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n}\n \n  dataframe.message = {\n    data: [\n    {\n      id: 1,\n      name: 'Power Supply',\n      value: round4(dataframe.message.data.data[0][0],4),\n      uom: 'MWH',\n      last: 359.80\n    },\n    {\n      id: 2,\n      name: 'Total Demand',\n      value: round4(dataframe.message.data.data[0][1],4),\n      uom: 'MWH',\n      last: 12123.72\n    }\n  ]\n  };\n\nreturn dataframe;","outputs":1,"noerr":0,"userComments":[],"x":902.25,"y":283,"edges":[["5629173b.bedf6c08"]]},{"id":"5629173b.bedf6c08","type":"kpi","z":"d5062ea2.5a40af53","name":"Supply vs. Demand KPIs","sequenceNum":1,"pulseType":"widget-multi-indicator","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1130.25,"y":324,"edges":[[]]},{"id":"8397305c.89c8b","type":"table","z":"d5062ea2.5a40af53","name":"OverallTrend","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1085,"y":161,"edges":[[]]},{"id":"c65d7d2a.92cd5dbc","type":"table","z":"d5062ea2.5a40af53","name":"ColumnRange","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":238,"y":456,"edges":[[]]},{"id":"43c499f9.38e725b7","type":"table","z":"d5062ea2.5a40af53","name":"Last3montsh","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1102,"y":239,"edges":[[]]},{"id":"d50dd98f.862708","type":"function","z":"d5062ea2.5a40af53","name":"T_ND_Dist","clusterid":"","func":"series = dataframe.message.data.data;\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"ND\",\n    legend: [\"ND\"]\n}\ndataframe.message = {\n data: [series],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"userComments":[],"x":79,"y":452,"edges":[["ac5e5e8.40b14a"]]},{"id":"5fa78436.a1108c","type":"html","z":"d5062ea2.5a40af53","name":"","sequenceNum":1,"pulseType":"widget-html","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":255,"y":95,"edges":[["4fa3ac2c.cd39043b"]]},{"id":"ac5e5e8.40b14a","type":"series","z":"d5062ea2.5a40af53","name":"ND Distribution","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":314,"y":559,"edges":[[]]},{"id":"d1695905.384a644b","type":"table","z":"d5062ea2.5a40af53","name":"WindGbehaviour","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":917,"y":395,"edges":[[]]},{"id":"d3df8672.a61adaea","type":"table","z":"d5062ea2.5a40af53","name":"ProdValues","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":828,"y":514,"edges":[[]]},{"id":"e33ec87a.cfadb1cd","type":"table","z":"d5062ea2.5a40af53","name":"30Min","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":874,"y":587,"edges":[[]]},{"id":"5c24a095.80e6de6e","type":"table","z":"d5062ea2.5a40af53","name":"15Min","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":874,"y":663,"edges":[[]]},{"id":"6307e8f2.d0bcf307","type":"table","z":"d5062ea2.5a40af53","name":"AnalyizeGData","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":699,"y":753,"edges":[[]]},{"id":"18dc677f.dac8f4f8","type":"function","z":"d5062ea2.5a40af53","name":"T_WindG","clusterid":"","func":"var data = dataframe.message.data.data;\nvar minWindG = data[0][0];\nvar maxWindG = data[0][1];\nvar medianWindG = data[0][2];\n\ndataframe.message = {\n    \"data\": [\n{x: '1',low : minWindG , q1: minWindG, median: medianWindG, q3: maxWindG, high: maxWindG}\n  ]\n}\nreturn dataframe;","outputs":1,"noerr":0,"userComments":[],"x":1208,"y":389,"edges":[["55368212.6d099ef5"]]},{"id":"55368212.6d099ef5","type":"boxplot","z":"d5062ea2.5a40af53","name":"WindGenerationRange","sequenceNum":1,"pulseType":"widget-generic-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1245,"y":455,"edges":[[]]},{"id":"c78032e2.9f0e4cc5","type":"function","z":"d5062ea2.5a40af53","name":"T_WindC","clusterid":"","func":"var data = dataframe.message.data.data;\nvar minWindC = data[0][3];\nvar maxWindC = data[0][4];\nvar medianWindC = data[0][5];\n\ndataframe.message = {\n    \"data\": [\n{x: '1',low : minWindC , q1: minWindC, median: medianWindC, q3: maxWindC, high: maxWindC}\n  ]\n}\nreturn dataframe;","outputs":1,"noerr":0,"userComments":[],"x":1078,"y":390,"edges":[["200b87bf.fa62145f"]]},{"id":"200b87bf.fa62145f","type":"boxplot","z":"d5062ea2.5a40af53","name":"WindCapacityRange","sequenceNum":1,"pulseType":"widget-generic-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1028,"y":457,"edges":[[]]},{"id":"547e4eaa.db331","type":"function","z":"d5062ea2.5a40af53","name":"T_Prod_Hist","clusterid":"","func":"var data = dataframe.message.data.data;\nvar _data = [];\ndata.map(function(item){\n    var range = Math.round(item[0]) + \"-\" + Math.round(item[1]);\n    var count = item[2];\n    _data.push([range, count]);\n});\ndataframe.message = {\n    data : [_data],\n    options: {}\n}\nreturn dataframe;","outputs":1,"noerr":0,"userComments":[],"x":970,"y":511,"edges":[["eadd843d.07de58"]]},{"id":"eadd843d.07de58","type":"column","z":"d5062ea2.5a40af53","name":"ProductionValuesDistribution","sequenceNum":1,"pulseType":"widget-column-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1216,"y":556,"edges":[[]]},{"id":"126d066f.79cebf82","type":"function","z":"d5062ea2.5a40af53","name":"T_30Min","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[1]]);\n        windCSeries.push([item[0], item[2]]);\n        solarGSeries.push([item[0], item[3]]);\n        solarCSeries.push([item[0], item[4]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"userComments":[],"x":1010,"y":588,"edges":[["e9ea0f70.595b76c0"]]},{"id":"e9ea0f70.595b76c0","type":"series","z":"d5062ea2.5a40af53","name":"30MinGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1169,"y":637,"edges":[[]]},{"id":"5e85f6c9.630be001","type":"function","z":"d5062ea2.5a40af53","name":"T_15min","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[6]]);\n        windCSeries.push([item[0], item[7]]);\n        solarGSeries.push([item[0], item[8]]);\n        solarCSeries.push([item[0], item[9]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"userComments":[],"x":1015,"y":666,"edges":[["33f68e9d.3f9f9783"]]},{"id":"33f68e9d.3f9f9783","type":"series","z":"d5062ea2.5a40af53","name":"15MinGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1135,"y":714,"edges":[[]]},{"id":"3a577fb3.793fc50a","type":"function","z":"d5062ea2.5a40af53","name":"T_Analyzed_Data","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[6]]);\n        windCSeries.push([item[0], item[7]]);\n        solarGSeries.push([item[0], item[8]]);\n        solarCSeries.push([item[0], item[9]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"userComments":[],"x":875,"y":754,"edges":[["12bfca35.fd6cdece"]]},{"id":"12bfca35.fd6cdece","type":"series","z":"d5062ea2.5a40af53","name":"AnalyzedGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1008,"y":809,"edges":[[]]}]
