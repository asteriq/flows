[{"id":"a377911e.9244a2fa","type":"create","z":"ac4b9c5a.59d600dd","name":"Query Playbook","host":"https://vora-notebook-checktimeseries.app.quantiply.com","notebookName":"Vora TimeSeries","x":128.25,"y":264,"edges":[["c72eaf88.e6cd44f6"]]},{"id":"630b2ab7.f04af9e3","type":"sh","z":"ac4b9c5a.59d600dd","name":"Get Data and Load into HDFS","content":"wget http://cloud.quantiply.io/DemandData_2015_2.csv\nhadoop fs -put DemandData_2015_2.csv\nhadoop fs -ls","x":333.25,"y":170,"edges":[["6b5526e0.3614c98b"]]},{"id":"6f9011eb.a676eac7","type":"inject","z":"ac4b9c5a.59d600dd","name":"","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"x":155.25,"y":201,"edges":[["a377911e.9244a2fa"]]},{"id":"c72eaf88.e6cd44f6","type":"spark","z":"ac4b9c5a.59d600dd","name":"Single Column and Range","content":"sqlContext.sql(\"``SELECT ts, ND FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","x":223.25,"y":376,"edges":[["95d0c993.2af3c4cd","87542f6a.5e18da95","5c88ba32.0f9800db"]]},{"id":"6b5526e0.3614c98b","type":"spark","z":"ac4b9c5a.59d600dd","name":"Spark Paragraph","content":"import org.apache.spark.sql._\nval sqlContext = new SapSQLContext( sc )\n\nsqlContext.sql(s\"\"\"REGISTER ALL TABLES USING com.sap.spark.vora OPTIONS (eagerLoad \"false\")\"\"\")\n\nsqlContext.sql(\"SHOW TABLES\").show()","x":294.25,"y":242,"edges":[["6b90caf2.4b64160c"]]},{"id":"5c88ba32.0f9800db","type":"spark","z":"ac4b9c5a.59d600dd","name":"What is the overall trend in available wind and solar capacity over the year of 2015?","content":"sqlContext.sql(\"\"\"``SELECT TREND(Embedded_Wind_Capacity), TREND(Embedded_Solar_Capacity)\n  FROM national_grid_demand\n  WHERE PERIOD BETWEEN TIMESTAMP '2015-01-01 00:00:00' AND TIMESTAMP '2016-01-01 00:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n","x":701.25,"y":84,"edges":[["2b768f96.60365a37","3fec75b6.411eb114"]]},{"id":"2b768f96.60365a37","type":"spark","z":"ac4b9c5a.59d600dd","name":"Trend over the last three months","content":"sqlContext.sql(\"``SELECT TREND(ND) FROM national_grid_demand WHERE PERIOD AS OF TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()","x":687.25,"y":190,"edges":[["407803bb.77ee45ba","5a0ec5da.4cf4fe09"]]},{"id":"407803bb.77ee45ba","type":"spark","z":"ac4b9c5a.59d600dd","name":"Supply vs. Demand","content":"sqlContext.sql(\"``SELECT median(Embedded_Solar_Generation), median(Embedded_Solar_Capacity) FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","x":643.25,"y":240,"edges":[["d488537d.8957b867","05ffa3b6.fdc45803"]]},{"id":"d488537d.8957b867","type":"spark","z":"ac4b9c5a.59d600dd","name":"How is Wind Generation is behaving?","content":"sqlContext.sql(\"``SELECT min(Embedded_Wind_Generation) as minWG,max(Embedded_Wind_Generation) as maxWG,median(Embedded_Wind_Generation) as medWG,min(Embedded_Wind_Capacity) as minWC, max(Embedded_Wind_Capacity) as maxWC, median(Embedded_Wind_Capacity)as medWC FROM national_grid_demand WHERE PERIOD BETWEEN TIMESTAMP '2015-08-01 00:00:00' AND TIMESTAMP '2015-09-01 00:00:00'`` USING com.sap.spark.engines\").show()\n","x":707.25,"y":316,"edges":[["85b07a23.57b814f8","885e45b1.f6794eac","53b8b6b0.e999889b","d205c2a5.dccdae69"]]},{"id":"d205c2a5.dccdae69","type":"spark","z":"ac4b9c5a.59d600dd","name":"how the production values deviate throughout the years?","content":"sqlContext.sql(\"``select * from HISTOGRAM ( SERIES national_grid_demand, 10, DESCRIPTOR( Embedded_Wind_Generation ) ) HIST`` USING com.sap.spark.engines\").show()\n","x":701.25,"y":408,"edges":[["02296940.aac807f2","f3322708.5606174d","4afcd191.1699e9b5"]]},{"id":"6b90caf2.4b64160c","type":"spark","z":"ac4b9c5a.59d600dd","name":"Create Partitions and Series Tables","content":"sqlContext.sql(\"CREATE PARTITION FUNCTION PM5(C TIMESTAMP) AS RANGE BOUNDARIES(TIMESTAMP '2015-04-01 09:00:00.0000', TIMESTAMP '2015-09-01 09:00:00.0000') USING com.sap.spark.engines\")\nsqlContext.sql(\"CREATE PARTITION SCHEME PS5 USING PM5 USING com.sap.spark.engines\")\nsqlContext.sql(s\"\"\"CREATE TABLE national_grid_demand5 ( ts TIMESTAMP, ND double, I014_ND double, TSD double, I014_TSD double, England_Wales_Demand double, Embedded_Wind_Generation double, Embedded_Wind_Capacity integer, Embedded_Solar_Generation double, Embedded_Solar_Capacity integer )\n    SERIES ( PERIOD FOR SERIES ts START TIMESTAMP '2015-01-01 00:00:00' END TIMESTAMP '2016-01-01 00:00:00'\n    EQUIDISTANT INCREMENT BY 30 MINUTE DEFAULT COMPRESSION use (APCA error 3.0 percent)\n    compression on (Embedded_Wind_Generation) use (SDT error 4.0 percent)\n    compression on (Embedded_Solar_Generation) use (SDT error 5.0 percent) )\n    PARTITION BY PS5( ts )\n    USING com.sap.spark.engines\n    OPTIONS (\n        files \"/user/spark/DemandData_2015_2.csv\",\n        csvskip \"1\",\n        csvdelimiter \";\",\n        storagebackend \"hdfs\")\"\"\".stripMargin)\n ","x":371.25,"y":311,"edges":[["c72eaf88.e6cd44f6"]]},{"id":"4afcd191.1699e9b5","type":"spark","z":"ac4b9c5a.59d600dd","name":"30 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n     ts,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        24 HOUR,\n        ROUND_HALF_UP,\n        SUM => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        AVG => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity)  )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 12:00:00'\n                 AND TIMESTAMP '2015-08-03 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n \n","x":657.25,"y":506,"edges":[["f17ffcb1.e5f1d7f6","16f5b14b.4273c4f8","ead39a9b.3c3ffb27"]]},{"id":"ead39a9b.3c3ffb27","type":"spark","z":"ac4b9c5a.59d600dd","name":"Or 15 Minute Granularity","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","x":667.25,"y":581,"edges":[["2f4fcd8a.1669c6b8","84b256e4.a9064f46","51622904.f544ac31"]]},{"id":"51622904.f544ac31","type":"spark","z":"ac4b9c5a.59d600dd","name":"Analyze Granularized Data","content":"sqlContext.sql(s\"\"\"``SELECT\n      ts,\n      ND, I014_ND,\n      TSD, I014_TSD,\n      England_Wales_Demand,\n      Embedded_Wind_Generation, Embedded_Wind_Capacity,\n      Embedded_Solar_Generation, Embedded_Solar_Capacity\n    FROM\n      GRANULIZE(\n        SERIES national_grid_demand,\n        15 Minute,\n        ROUND_HALF_UP,\n        EVEN => DESCRIPTOR( ND, I014_ND ),\n        EVEN => DESCRIPTOR( TSD, I014_TSD, England_Wales_Demand ),\n        EVEN => DESCRIPTOR( Embedded_Wind_Generation, Embedded_Solar_Generation ),\n        SAME => DESCRIPTOR( Embedded_Wind_Capacity, Embedded_Solar_Capacity) )\n    WHERE\n      PERIOD BETWEEN TIMESTAMP '2015-08-01 08:00:00'\n                 AND TIMESTAMP '2015-08-01 12:00:00'`` USING com.sap.spark.engines\"\"\".stripMargin).show()\n\n","x":671.25,"y":662,"edges":[["e351cbd8.502c87fd","05eef8f5.79e2190e"]]},{"id":"ad388f36.a9e29150","type":"create","z":"ac4b9c5a.59d600dd","name":"Create Vora Playbook","host":"https://vora-notebook-checktimeseries.app.quantiply.com","notebookName":"Vora TimeSeries","x":238.25,"y":126,"edges":[["630b2ab7.f04af9e3"]]},{"id":"e7ee090c.f3a53dfa","type":"inject","z":"ac4b9c5a.59d600dd","name":"","topic":"","message":"","messageType":"date","repeat":"","crontab":"","once":false,"x":197.25,"y":42,"edges":[["ad388f36.a9e29150","80ca9f10.d77b9292"]]},{"id":"05ffa3b6.fdc45803","type":"function","z":"ac4b9c5a.59d600dd","name":"Transformer","clusterid":"","func":" function round4(num, dec) {\n    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n}\n \n  dataframe.message = {\n    data: [\n    {\n      id: 1,\n      name: 'Power Supply',\n      value: round4(dataframe.message.data.data[0][0],4),\n      uom: 'MWH',\n      last: 359.80\n    },\n    {\n      id: 2,\n      name: 'Total Demand',\n      value: round4(dataframe.message.data.data[0][1],4),\n      uom: 'MWH',\n      last: 12123.72\n    }\n  ]\n  };\n\nreturn dataframe;","outputs":1,"noerr":0,"x":948.25,"y":272,"edges":[["d42be34a.3c21b027"]]},{"id":"d42be34a.3c21b027","type":"kpi","z":"ac4b9c5a.59d600dd","name":"Supply vs. Demand KPIs","sequenceNum":1,"pulseType":"widget-multi-indicator","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1176.25,"y":313,"edges":[[]]},{"id":"3fec75b6.411eb114","type":"table","z":"ac4b9c5a.59d600dd","name":"OverallTrend","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1131,"y":150,"edges":[[]]},{"id":"95d0c993.2af3c4cd","type":"table","z":"ac4b9c5a.59d600dd","name":"ColumnRange","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":284,"y":445,"edges":[[]]},{"id":"5a0ec5da.4cf4fe09","type":"table","z":"ac4b9c5a.59d600dd","name":"Last3montsh","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1148,"y":228,"edges":[[]]},{"id":"87542f6a.5e18da95","type":"function","z":"ac4b9c5a.59d600dd","name":"T_ND_Dist","clusterid":"","func":"series = dataframe.message.data.data;\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"ND\",\n    legend: [\"ND\"]\n}\ndataframe.message = {\n data: [series],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"x":125,"y":441,"edges":[["7bb6d6c1.debb6043"]]},{"id":"80ca9f10.d77b9292","type":"html","z":"ac4b9c5a.59d600dd","name":"","sequenceNum":1,"pulseType":"widget-html","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":301,"y":84,"edges":[["ad388f36.a9e29150"]]},{"id":"7bb6d6c1.debb6043","type":"series","z":"ac4b9c5a.59d600dd","name":"ND Distribution","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":360,"y":548,"edges":[[]]},{"id":"85b07a23.57b814f8","type":"table","z":"ac4b9c5a.59d600dd","name":"WindGbehaviour","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":963,"y":384,"edges":[[]]},{"id":"02296940.aac807f2","type":"table","z":"ac4b9c5a.59d600dd","name":"ProdValues","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":874,"y":503,"edges":[[]]},{"id":"f17ffcb1.e5f1d7f6","type":"table","z":"ac4b9c5a.59d600dd","name":"30Min","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":920,"y":576,"edges":[[]]},{"id":"2f4fcd8a.1669c6b8","type":"table","z":"ac4b9c5a.59d600dd","name":"15Min","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":920,"y":652,"edges":[[]]},{"id":"e351cbd8.502c87fd","type":"table","z":"ac4b9c5a.59d600dd","name":"AnalyizeGData","sequenceNum":1,"pulseType":"widget-table","description":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":745,"y":742,"edges":[[]]},{"id":"885e45b1.f6794eac","type":"function","z":"ac4b9c5a.59d600dd","name":"T_WindG","clusterid":"","func":"var data = dataframe.message.data.data;\nvar minWindG = data[0][0];\nvar maxWindG = data[0][1];\nvar medianWindG = data[0][2];\n\ndataframe.message = {\n    \"data\": [\n{x: '1',low : minWindG , q1: minWindG, median: medianWindG, q3: maxWindG, high: maxWindG}\n  ]\n}\nreturn dataframe;","outputs":1,"noerr":0,"x":1254,"y":378,"edges":[["ca27c92c.23bc2856"]]},{"id":"ca27c92c.23bc2856","type":"boxplot","z":"ac4b9c5a.59d600dd","name":"WindGenerationRange","sequenceNum":1,"pulseType":"widget-generic-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1291,"y":444,"edges":[[]]},{"id":"53b8b6b0.e999889b","type":"function","z":"ac4b9c5a.59d600dd","name":"T_WindC","clusterid":"","func":"var data = dataframe.message.data.data;\nvar minWindC = data[0][3];\nvar maxWindC = data[0][4];\nvar medianWindC = data[0][5];\n\ndataframe.message = {\n    \"data\": [\n{x: '1',low : minWindC , q1: minWindC, median: medianWindC, q3: maxWindC, high: maxWindC}\n  ]\n}\nreturn dataframe;","outputs":1,"noerr":0,"x":1124,"y":379,"edges":[["6e1f3784.ebbd2170"]]},{"id":"6e1f3784.ebbd2170","type":"boxplot","z":"ac4b9c5a.59d600dd","name":"WindCapacityRange","sequenceNum":1,"pulseType":"widget-generic-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1074,"y":446,"edges":[[]]},{"id":"f3322708.5606174d","type":"function","z":"ac4b9c5a.59d600dd","name":"T_Prod_Hist","clusterid":"","func":"var data = dataframe.message.data.data;\nvar _data = [];\ndata.map(function(item){\n    var range = Math.round(item[0]) + \"-\" + Math.round(item[1]);\n    var count = item[2];\n    _data.push([range, count]);\n});\ndataframe.message = {\n    data : [_data],\n    options: {}\n}\nreturn dataframe;","outputs":1,"noerr":0,"x":1016,"y":500,"edges":[["70c9bfb1.2a6ce4fa"]]},{"id":"70c9bfb1.2a6ce4fa","type":"column","z":"ac4b9c5a.59d600dd","name":"ProductionValuesDistribution","sequenceNum":1,"pulseType":"widget-column-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1262,"y":545,"edges":[[]]},{"id":"16f5b14b.4273c4f8","type":"function","z":"ac4b9c5a.59d600dd","name":"T_30Min","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[1]]);\n        windCSeries.push([item[0], item[2]]);\n        solarGSeries.push([item[0], item[3]]);\n        solarCSeries.push([item[0], item[4]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"x":1056,"y":577,"edges":[["ffbf2b6e.65ff0c56"]]},{"id":"ffbf2b6e.65ff0c56","type":"series","z":"ac4b9c5a.59d600dd","name":"30MinGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1215,"y":626,"edges":[[]]},{"id":"84b256e4.a9064f46","type":"function","z":"ac4b9c5a.59d600dd","name":"T_15min","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[6]]);\n        windCSeries.push([item[0], item[7]]);\n        solarGSeries.push([item[0], item[8]]);\n        solarCSeries.push([item[0], item[9]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"x":1061,"y":655,"edges":[["0b8491ff.a805aded"]]},{"id":"0b8491ff.a805aded","type":"series","z":"ac4b9c5a.59d600dd","name":"15MinGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"x":1181,"y":703,"edges":[[]]},{"id":"05eef8f5.79e2190e","type":"function","z":"ac4b9c5a.59d600dd","name":"T_Analyzed_Data","clusterid":"","func":"result = dataframe.message.data.data;\nwindGSeries = [];\nwindCSeries = [];\nsolarGSeries = [];\nsolarCSeries = [];\nresult.map(function(item){\n        windGSeries.push([item[0], item[6]]);\n        windCSeries.push([item[0], item[7]]);\n        solarGSeries.push([item[0], item[8]]);\n        solarCSeries.push([item[0], item[9]]);  \n})\nvar options = {\n    xtitle: \"Time\",\n    ytitle: \"Values\",\n    legend: [\"windGeneration\", \"windCapacity\", \"solarGeneration\", \"solarCapacity\"]\n}\ndataframe.message = {\n data: [windGSeries, windCSeries, solarGSeries, solarCSeries],\n options: options\n}\nreturn dataframe;\n","outputs":1,"noerr":0,"x":921,"y":743,"edges":[["cb780b8f.3cbdf46d"]]},{"id":"cb780b8f.3cbdf46d","type":"series","z":"ac4b9c5a.59d600dd","name":"AnalyzedGranularity","sequenceNum":1,"pulseType":"widget-series-chart","description":"","xtitle":"","ytitle":"","enabled":true,"streamEnabled":false,"maxPoints":10,"userComments":[],"x":1054,"y":798,"edges":[[]]}]
